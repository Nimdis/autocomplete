{"version":3,"sources":["Menu.tsx","Autocomplete.tsx","AsyncAutocomplete.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MenuCn","cn","Option","isActive","children","onClick","className","Menu","options","activeOption","isLoading","onChoice","handleClick","useCallback","val","map","option","i","value","content","AutocompleteCn","initialState","isMenuVisible","isDirty","HIDE_MENU","SHOW_MENU","UPDATE_OPTION","UPDATE_OPTIONS","HANDLE_VALUE_CHANGE","HANDLE_BLUR","HANDLE_CHOICE","HANDLE_CLEAR","reducer","state","action","type","Autocomplete","initialOptions","isClearable","disableLocalFilter","onClear","onChange","onInputChange","inputRef","useRef","useReducer","dispatch","useEffect","handleHide","length","handleChange","e","target","filter","el","toLowerCase","includes","handleKeyDown","keyCode","current","blur","handleOutsideClick","handleChoice","handleClear","onOutsideClick","htmlFor","ref","autoComplete","onKeyDown","placeholder","id","AsyncAutocomplete","loadOptions","shouldLoadDefaultOptions","useState","setOption","setOptions","setLoading","cleanedValue","setCleanedValue","lastRequest","requestOptions","a","prom","console","error","handleInputChange","undefined","Promise","resolve","setTimeout","slice","App","style","width","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"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","file":"static/js/main.cabb3226.chunk.js","sourcesContent":["import React, { FC, ReactNode, useCallback } from 'react'\n\nimport { cn } from '@bem-react/classname'\n\nimport { IOption } from './types'\n\nimport './Menu.css'\n\nconst MenuCn = cn('Menu')\n\ninterface IMenuOptionProps {\n    isActive: boolean\n    children: ReactNode | string\n    onClick: () => void\n}\n\nexport const Option: FC<IMenuOptionProps> = ({\n    isActive, children, onClick\n}) => {\n    return (\n        <div className={MenuCn('Option', { isActive })} onClick={onClick}>\n            {children}\n        </div>\n    )\n}\n\nexport interface IMenuProps {\n    options: IOption[]\n    activeOption?: IOption\n    isLoading?: boolean\n    onChoice: (val: IOption) => void\n}\n\nexport const Menu: FC<IMenuProps> = ({\n    options,\n    activeOption,\n    isLoading,\n    onChoice\n}) => {\n    const handleClick = useCallback((val: IOption) => () => {\n        onChoice(val)\n    }, [onChoice])\n\n    return (\n        <div className={MenuCn()}>\n            {isLoading ? (\n                <div>Loading...</div>\n            ) : options.map((option, i) => (\n                <Option\n                    key={`${option.content}${i}`}\n                    isActive={activeOption?.value === option.value}\n                    onClick={handleClick(option)}\n                >\n                    {option.content}\n                </Option>\n            ))}\n        </div>\n    )\n}\n","import React, {\n    ChangeEvent,\n    KeyboardEvent,\n    FC,\n    useCallback,\n    useReducer,\n    useEffect,\n    useRef\n} from 'react'\n\nimport { cn } from '@bem-react/classname'\n\nimport OutsideClickHandler from 'react-outside-click-handler'\n\nimport { Menu } from './Menu'\nimport { IOption } from './types'\n\nimport './Autocomplete.css'\n\nconst AutocompleteCn = cn('Autocomplete')\n\nconst ENTER = 13\n\ninterface IState {\n    value: string\n    options: IOption[]\n    isMenuVisible: boolean\n    isDirty: boolean\n}\n\nconst initialState: IState = {\n    value: '',\n    options: [],\n    isMenuVisible: false,\n    isDirty: false\n}\n\nconst HIDE_MENU = 'HIDE_MENU'\nconst SHOW_MENU = 'SHOW_MENU'\nconst UPDATE_OPTION = 'UPDATE_OPTION'\nconst UPDATE_OPTIONS = 'UPDATE_OPTIONS'\nconst HANDLE_VALUE_CHANGE = 'HANDLE_VALUE_CHANGE'\nconst HANDLE_BLUR = 'HANDLE_BLUR'\nconst HANDLE_CHOICE = 'HANDLE_CHOICE'\nconst HANDLE_CLEAR = 'HANDLE_CLEAR'\n\ntype IAction = {\n    type: typeof HIDE_MENU\n} | {\n    type: typeof SHOW_MENU\n} | {\n    type: typeof HANDLE_VALUE_CHANGE\n    value?: string\n    options: IOption[]\n} | {\n    type: typeof HANDLE_BLUR\n    value?: string\n} | {\n    type: typeof HANDLE_CHOICE\n} | {\n    type: typeof UPDATE_OPTION\n    option?: IOption\n} | {\n    type: typeof UPDATE_OPTIONS\n    options: IOption[]\n} | {\n    type: typeof HANDLE_CLEAR\n}\n\nconst reducer = (state: IState, action: IAction): IState => {\n    switch (action.type) {\n        case HIDE_MENU:\n            return {\n                ...state,\n                isDirty: false,\n                isMenuVisible: false\n            }\n        case SHOW_MENU:\n            return {\n                ...state,\n                isMenuVisible: true\n            }\n        case HANDLE_VALUE_CHANGE:\n            return {\n                ...state,\n                value: action.value ?? '',\n                isDirty: true,\n                options: action.options\n            }\n        case HANDLE_BLUR:\n            return {\n                ...state,\n                value: action.value ?? ''\n            }\n        case HANDLE_CHOICE:\n            return {\n                ...state,\n                isDirty: false,\n                isMenuVisible: false\n            }\n        case UPDATE_OPTION:\n            return {\n                ...state,\n                value: action.option?.content ?? ''\n            }\n        case UPDATE_OPTIONS:\n            return {\n                ...state,\n                options: action.options\n            }\n        case HANDLE_CLEAR:\n            return {\n                ...state,\n                isDirty: false,\n                isMenuVisible: false,\n                value: ''\n            }\n        default:\n            return state\n    }\n}\n\nexport interface IAutocompleteProps {\n    options: IOption[]\n    value?: IOption\n    isClearable?: boolean\n    isLoading?: boolean\n    disableLocalFilter?: boolean\n    onChange: (value: IOption) => void\n    onInputChange?: (value: string) => string\n    onClear?: () => void\n}\n\nexport const Autocomplete: FC<IAutocompleteProps> = ({\n    options: initialOptions,\n    value: option,\n    isClearable,\n    disableLocalFilter = false,\n    isLoading,\n    onClear,\n    onChange,\n    onInputChange\n}) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const [state, dispatch] = useReducer(reducer, initialState, () => ({\n        ...initialState,\n        options: initialOptions,\n        value: option?.content ?? ''\n    }))\n\n    const { isDirty, isMenuVisible, options, value } = state\n\n    useEffect(() => {\n        if (!isDirty) {\n            dispatch({\n                type: UPDATE_OPTION,\n                option\n            })\n        }\n    }, [option, isDirty])\n\n    useEffect(() => {\n        dispatch({\n            type: UPDATE_OPTIONS,\n            options: initialOptions\n        })\n    }, [initialOptions])\n\n    const handleHide = useCallback(() => {\n        dispatch({\n            type: HIDE_MENU\n        })\n    }, [])\n\n    const handleClick = useCallback(() => {\n        if (options.length) {\n            dispatch({\n                type: SHOW_MENU\n            })\n        }\n    }, [options.length])\n\n    const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        const value = onInputChange ?\n            onInputChange(e.target.value) :\n            e.target.value\n        dispatch({\n            type: HANDLE_VALUE_CHANGE,\n            value,\n            options: disableLocalFilter ?\n                initialOptions :\n                initialOptions\n                    .filter(el =>\n                        el.content\n                            .toLowerCase()\n                            .includes(value.toLowerCase()\n                            )\n                    )\n        })\n    }, [disableLocalFilter, initialOptions, onInputChange])\n\n    const handleKeyDown = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.keyCode === ENTER) {\n            onChange(options[0])\n            handleHide()\n            inputRef.current!.blur()\n        }\n    }, [handleHide, onChange, options])\n\n    const handleOutsideClick = useCallback(() => {\n        inputRef.current!.blur()\n        handleHide()\n        dispatch({\n            type: HANDLE_BLUR,\n            value: option?.content\n        })\n    }, [handleHide, option?.content])\n\n    const handleChoice = useCallback((val: IOption) => {\n        onChange(val)\n        dispatch({\n            type: HANDLE_CHOICE\n        })\n    }, [onChange])\n\n    const handleClear = useCallback(() => {\n        dispatch({\n            type: HANDLE_CLEAR\n        })\n        onClear && onClear()\n    }, [onClear])\n\n    return (\n        <OutsideClickHandler onOutsideClick={handleOutsideClick}>\n            <div className={AutocompleteCn()}>\n                <div className={AutocompleteCn('Label')}>\n                    <label htmlFor=\"textField\">Some Text</label>\n                </div>\n                <div className={AutocompleteCn('Input')}>\n                    <input\n                        ref={inputRef}\n                        autoComplete=\"off\"\n                        onClick={handleClick}\n                        onChange={handleChange}\n                        onKeyDown={handleKeyDown}\n                        value={value}\n                        placeholder=\"Type something\"\n                        id=\"textField\"\n                        type=\"text\"\n                    />\n                    {isMenuVisible && (\n                        <Menu\n                            onChoice={handleChoice}\n                            options={options}\n                            activeOption={option}\n                            isLoading={isLoading}\n                        />\n                    )}\n                </div>\n                {isClearable && (\n                    <div className={AutocompleteCn('ClearButton')}>\n                        <button onClick={handleClear}>Clear</button>\n                    </div>\n                )}\n            </div>\n        </OutsideClickHandler>\n    )\n}\n","import React, { FC, useCallback, useEffect, useRef, useState } from 'react'\n\nimport { Autocomplete } from './Autocomplete'\nimport { IOption } from './types'\n\nexport interface IAsyncAutocompleteProps {\n    onInputChange?: (value: string) => string\n    loadOptions: (value?: string) => Promise<IOption[]>\n    isClearable?: boolean\n    shouldLoadDefaultOptions?: boolean\n}\n\nexport const AsyncAutocomplete: FC<IAsyncAutocompleteProps> = ({\n    loadOptions,\n    isClearable,\n    onInputChange,\n    shouldLoadDefaultOptions\n}) => {\n    const [option, setOption] = useState<IOption | undefined>()\n    const [options, setOptions] = useState<IOption[]>([])\n    const [isLoading, setLoading] = useState(false);\n    const [cleanedValue, setCleanedValue] = useState<string | undefined>()\n    const lastRequest = useRef<Promise<unknown> | undefined>()\n\n    const requestOptions = useCallback(async () => {\n        setLoading(true)\n        let prom\n        try {\n            if (cleanedValue) {\n                prom = loadOptions(\n                    onInputChange ?\n                        onInputChange(cleanedValue) :\n                        cleanedValue\n                )\n                lastRequest.current = prom\n                setOptions(await prom)\n            } else {\n                prom = loadOptions()\n                lastRequest.current = prom\n                setOptions(await prom)\n            }\n        } catch (err) {\n            // TODO handle error\n            console.error(err)\n        } finally {\n            if (lastRequest.current === prom) {\n                setLoading(false)\n            }\n        }\n    }, [cleanedValue, loadOptions, onInputChange])\n\n    useEffect(() => {\n        requestOptions()\n    }, [requestOptions])\n\n    const handleChange = useCallback((value?: IOption) => {\n        setOption(value)\n    }, [])\n\n    const handleInputChange = useCallback((value: string) => {\n        const val = onInputChange ? onInputChange(value) : value\n        setCleanedValue(val)\n        return val\n    }, [onInputChange])\n\n    const handleClear = useCallback(() => {\n        setCleanedValue(undefined)\n    }, [])\n\n    useEffect(() => {\n        if (shouldLoadDefaultOptions) {\n            requestOptions()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Autocomplete\n            isClearable={isClearable}\n            onChange={handleChange}\n            disableLocalFilter\n            options={options}\n            value={option}\n            isLoading={isLoading}\n            onInputChange={handleInputChange}\n            onClear={handleClear}\n        />\n    )\n}","import React from 'react';\n\nimport { AsyncAutocomplete } from './AsyncAutocomplete'\nimport { IOption } from './types';\n\nexport const options = [\n    { value: 'AL', content: 'Alabama' },\n    { value: 'AK', content: 'Alaska' },\n    { value: 'AS', content: 'American Samoa' },\n    { value: 'AZ', content: 'Arizona' },\n    { value: 'AR', content: 'Arkansas' },\n    { value: 'CA', content: 'California' },\n    { value: 'CO', content: 'Colorado' },\n    { value: 'CT', content: 'Connecticut' },\n    { value: 'DE', content: 'Delaware' },\n    { value: 'DC', content: 'District Of Columbia' },\n    { value: 'FM', content: 'Federated States Of Micronesia' },\n    { value: 'FL', content: 'Florida' },\n    { value: 'GA', content: 'Georgia' },\n    { value: 'GU', content: 'Guam' },\n    { value: 'HI', content: 'Hawaii' },\n    { value: 'ID', content: 'Idaho' },\n    { value: 'IL', content: 'Illinois' },\n    { value: 'IN', content: 'Indiana' },\n    { value: 'IA', content: 'Iowa' },\n    { value: 'KS', content: 'Kansas' },\n    { value: 'KY', content: 'Kentucky' },\n    { value: 'LA', content: 'Louisiana' },\n    { value: 'ME', content: 'Maine' },\n    { value: 'MH', content: 'Marshall Islands' },\n    { value: 'MD', content: 'Maryland' },\n    { value: 'MA', content: 'Massachusetts' },\n    { value: 'MI', content: 'Michigan' },\n    { value: 'MN', content: 'Minnesota' },\n    { value: 'MS', content: 'Mississippi' },\n    { value: 'MO', content: 'Missouri' },\n    { value: 'MT', content: 'Montana' },\n    { value: 'NE', content: 'Nebraska' },\n    { value: 'NV', content: 'Nevada' },\n    { value: 'NH', content: 'New Hampshire' },\n    { value: 'NJ', content: 'New Jersey' },\n    { value: 'NM', content: 'New Mexico' },\n    { value: 'NY', content: 'New York' },\n    { value: 'NC', content: 'North Carolina' },\n    { value: 'ND', content: 'North Dakota' },\n    { value: 'MP', content: 'Northern Mariana Islands' },\n    { value: 'OH', content: 'Ohio' },\n    { value: 'OK', content: 'Oklahoma' },\n    { value: 'OR', content: 'Oregon' },\n    { value: 'PW', content: 'Palau' },\n    { value: 'PA', content: 'Pennsylvania' },\n    { value: 'PR', content: 'Puerto Rico' },\n    { value: 'RI', content: 'Rhode Island' },\n    { value: 'SC', content: 'South Carolina' },\n    { value: 'SD', content: 'South Dakota' },\n    { value: 'TN', content: 'Tennessee' },\n    { value: 'TX', content: 'Texas' },\n    { value: 'UT', content: 'Utah' },\n    { value: 'VT', content: 'Vermont' },\n    { value: 'VI', content: 'Virgin Islands' },\n    { value: 'VA', content: 'Virginia' },\n    { value: 'WA', content: 'Washington' },\n    { value: 'WV', content: 'West Virginia' },\n    { value: 'WI', content: 'Wisconsin' },\n    { value: 'WY', content: 'Wyoming' },\n]\n\nconst loadOptions = (value?: string): Promise<IOption[]> => {\n    if (value) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(options.filter(el =>\n                    el.content.toLowerCase().includes(value.toLowerCase())\n                ).slice(0, 20))\n            }, 1000)\n        })\n    }\n    return Promise.resolve(options.slice(0, 20))\n}\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"window\" style={{ width: '300px' }}>\n                <div className=\"title-bar\">\n                    <div className=\"title-bar-text\">Win XP autocomplete sample</div>\n                    <div className=\"title-bar-controls\">\n                        <button aria-label=\"Minimize\"></button>\n                        <button aria-label=\"Maximize\"></button>\n                        <button aria-label=\"Close\"></button>\n                    </div>\n                </div>\n                <div className=\"window-body\">\n                    <AsyncAutocomplete\n                        loadOptions={loadOptions}\n                        isClearable\n                        shouldLoadDefaultOptions\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <link rel=\"stylesheet\" href=\"https://unpkg.com/xp.css\" />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}